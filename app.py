import requests
import json
import yaml
import time
import sys

INTERVAL = 30 / 5   #  5 requests in a rolling 30 second window for NIST API products

# ensure user provides output file
if not len(sys.argv) == 3:
    raise Exception("Please include files for input and output.")

# dictionary to be converted into yaml file
dic = {}    

# open json input and yaml output files
taskfile = open(sys.argv[1],'w')
data = json.load(taskfile)
taskfile.close()
output = open(sys.argv[2],'w')

# iterate through input json file
for i in data['components']:
    dic[i['name']] = {}
    dic[i['name']]['version'] = i['version']
    dic[i['name']]['cpe'] = i['cpe']
    print(f"checking {i['name']}...")

    # CPE API call --> check if CPE exists
    response = requests.get('https://services.nvd.nist.gov/rest/json/cpes/2.0?cpeMatchString=' + i['cpe'])
    time.sleep(INTERVAL)
    entry = response.json()
    if entry['resultsPerPage'] > 0:
        dic[i['name']]['cpe exists'] = True
        responsecve = requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=' + i['cpe'] + '&isVulnerable')    # search CVE via CPE
    else: 
        dic[i['name']]['cpe exists'] = False
        responsecve = requests.get('https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=' + i['name'] + '&keywordExactMatch')    # search CVE via component name
    time.sleep(INTERVAL)

    # iterate through CVE API response and populate dictionary
    entrycve = responsecve.json()
    if bool(entrycve['vulnerabilities']):
        dic[i['name']]['vulnerabilities found'] = {}
        for vulnerability in entrycve['vulnerabilities']:
            cve = vulnerability['cve']['id']
            dic[i['name']]['vulnerabilities found'][cve] = {}
            for configuration in vulnerability['cve']['configurations']:
                for node in configuration['nodes']:
                    for cpeMatch in node['cpeMatch']:
                        dic[i['name']]['vulnerabilities found'][cve][(cpeMatch['criteria'])] = {}
                        if 'versionStartIncluding' in cpeMatch:
                            dic[i['name']]['vulnerabilities found'][cve][(cpeMatch['criteria'])]['version start'] = cpeMatch['versionStartIncluding']
                        if 'versionEndExcluding' in cpeMatch:
                            dic[i['name']]['vulnerabilities found'][cve][(cpeMatch['criteria'])]['version end'] = cpeMatch['versionEndExcluding']
    else:
        dic[i['name']]['vulnerabilities found'] = 'none'

# convert dictionary into yaml output and close file
yaml.dump(dic, output, default_flow_style=False, sort_keys=False)  
output.close()
